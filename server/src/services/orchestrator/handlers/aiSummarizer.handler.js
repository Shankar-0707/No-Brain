// server/src/services/orchestrator/handlers/aiSummarizer.handler.js

/**
 * Mock AI Summarizer Handler
 * In production, this would call OpenAI/Gemini API
 * 
 * @param {Object} nodeConfig - Node configuration from workflow
 * @param {Object} inputs - Outputs from previous nodes
 * @param {Object} context - Execution context (runId, userId, etc.)
 * @returns {Promise<Object>} - { success, output, logs }
 */
async function aiSummarizerHandler(nodeConfig, inputs, context) {
  const startTime = Date.now();
  
  try {
    console.log(`[aiSummarizer] Starting execution for node ${nodeConfig.id}`);
    
    // Get input from previous node and coerce to string safely
    const rawInput = inputs[nodeConfig.data?.inputFrom];
    let inputText;
    if (rawInput === undefined || rawInput === null) {
      inputText = "No input provided";
    } else if (typeof rawInput === 'string') {
      inputText = rawInput;
    } else if (typeof rawInput === 'object') {
      // Prefer common text fields if present
      if (rawInput.text && typeof rawInput.text === 'string') {
        inputText = rawInput.text;
      } else if (rawInput.message && typeof rawInput.message === 'string') {
        inputText = rawInput.message;
      } else {
        // Fallback to JSON representation
        try {
          inputText = JSON.stringify(rawInput);
        } catch (e) {
          inputText = String(rawInput);
        }
      }
    } else {
      inputText = String(rawInput);
    }
    
    // Simulate AI processing delay
    await new Promise(resolve => setTimeout(resolve, 1500));
    
  // Mock summarization (in reality, call AI API here)
  const summary = `Summary: ${inputText.substring(0, 100)}... [Generated by AI]`;
    
    const executionTime = Date.now() - startTime;
    
    return {
      success: true,
      output: summary,
      logs: {
        nodeId: nodeConfig.id,
        type: 'aiSummarizer',
        status: 'completed',
        executionTime: `${executionTime}ms`,
        timestamp: new Date().toISOString(),
        inputPreview: inputText.substring(0, 50),
        outputPreview: summary.substring(0, 50)
      }
    };
  } catch (error) {
    return {
      success: false,
      output: null,
      logs: {
        nodeId: nodeConfig.id,
        type: 'aiSummarizer',
        status: 'failed',
        error: error.message,
        timestamp: new Date().toISOString()
      }
    };
  }
}

export default aiSummarizerHandler;
